@using RestaurantBookingSystem.Helpers
@using RestaurantBookingSystem.Infrastructure.DataEntities
@using RestaurantBookingSystem.Infrastructure.Repositories
@model RestaurantBookingSystem.Models.ConfirmBookingViewModel

@{
    ViewBag.Title = "Confirm Booking";
}
@using (Html.BeginForm())
{
<h2 style="text-align: center">Please review and confirm your booking</h2>
<div class="h-seperator"></div>
<div class="ui-widget ui-widget-content ui-corner-all" style="border: 1px solid black;padding:10px;">
    <div class="account-detail-header ui-corner-top ui-widget-header">Booking Summary</div>
    <div class="account-detail-block ui-corner-bottom">
        <p class="p-details-row"><label class="p-detail-label">Booking for</label>: <span>@Model.BookedFor.TryMakingLocalToClient().ToString("dddd, dd MMM, h:mm tt")</span></p>
        <p class="p-details-row"><label class="p-detail-label">Booking Duration</label>: <span>@(Model.BookedSlots * AppConfigHelper.BookingSlotMinutes) Minutes</span></p>
    </div>
    <div class="account-detail-header ui-corner-top ui-widget-header">Booking Details</div>
    <div class="account-detail-block ui-corner-bottom">
        <div>
            <table class="ui-corner-all" summary="Confirm Booking">
                <thead>
                    <tr>
                        <th id="BookedItems" scope="col">
                            Booked Item
                        </th>
                        <th id="BookedDescription" scope="col">
                            Booking Description
                        </th>
                        <th id="BookedAmount" class="amount" scope="col">
                            Amount (Rs.)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                           Tables (@Model.Tables.Count):
                        </td>
                        <td>
                            <div>
                                <span class="span-table-detail">Table Capacity</span>
                                <span class="span-table-detail text-right">Table Price</span>
                                <span class="span-table-detail text-right">Booked Duration</span>
                            </div>
                        @foreach (var table in Model.Tables)
                        {
                            <div class="sub-item-description">
                                <span class="span-table-detail">@((int) table.TableType)</span>
                                <span class="span-table-detail text-right">@table.Price.ToString("#0 . 00 /-")</span>
                                <span class="span-table-detail text-right">@(AppConfigHelper.BookingSlotMinutes * Model.BookedSlots) Minutes</span>
                            </div>
                        }
                        </td>
                        <td class="amount">
                            <div class="price-title">
                                <span>Booking Cost</span>
                            </div>
                        @foreach (var table in Model.Tables)
                        {
                            <div class="sub-item-description ui-helper-clearfix">
                                    <span style="float: left">Rs. </span><span>@((table.Price * Model.BookedSlots).ToString("#0 . 00 /-"))</span>
                            </div>
                        }
                        </td>
                    </tr>
                @if (Model.MenuItems.Count > 0)
                {
                    <tr>
                        <td>
                            Menu Items (@Model.MenuItems.Count):
                        </td>
                        <td>
                            <div>
                                <span>Item Name</span>
                            </div>
                        @foreach (var item in Model.MenuItems)
                        {
                            <div class="sub-item-description">
                                <span>@item.Name</span>
                            </div>
                        }
                        </td>
                        <td class="amount">
                        <div class="price-title">
                            <span>Price</span>
                        </div>
                        @foreach (var item in Model.MenuItems)
                        {
                            <div class="sub-item-description ui-helper-clearfix">
                                    <span style="float:left;">Rs. </span><span>@item.Price.ToString("#0 . 00 /-")</span>
                            </div>
                        }
                        </td>
                    </tr>
                }
                    <tr>
                        <td></td>
                        <td></td>
                        <td class="amount">
                        <div class="price-title">
                            <span>Gross Total</span>
                        </div>
                            <div class="sub-item-description ui-helper-clearfix">
                                    <span style="float:left;">Rs. </span><span>@Model.Bill.GrossAmount.ToString("#0 . 00 /-")</span>
                            </div>
                        </td>
                    </tr>
                @if (Model.Offer != null)
                {
                    <tr>
                        <td>
                            Offers
                        </td>
                        <td>
                            <div>
                                    <span>Offer Description</span>
                            </div>
                            @{
                                var offerdescription = string.Empty;
                                var itemprice = string.Empty;
                                switch (Model.Offer.Type)
                                {
                                    case OfferBase.OfferType.DiscountAmount:
                                        {
                                            offerdescription = "Rs. " + Model.Offer.Value + " Off";
                                            itemprice = Model.Bill.DiscountAmount.ToString("(- #0 . 00 ) /-");
                                            break;
                                        }
                                    case OfferBase.OfferType.DiscountPercent:
                                        {
                                            offerdescription = Model.Offer.Value + " % Off";
                                            itemprice = Model.Bill.DiscountAmount.ToString("(- #0 . 00 ) /-");
                                            break;
                                        }
                                    case OfferBase.OfferType.FreeServing:
                                        {
                                            var offermenuitem = new RestaurantMenuItemRepository().Find(Model.Offer.Value);
                                            if (offermenuitem != null)
                                            {
                                                offerdescription = offermenuitem.Name + " worth Rs. " + offermenuitem.Price.ToString("#0.00") + " for FREE";
                                                itemprice = Model.Bill.DiscountAmount.ToString("(- #0 . 00 ) /-");
                                            }
                                            break;
                                        }
                                }
                            }                                
                            <div class="sub-item-description">
                                <span>@offerdescription</span>
                            </div>
                        </td>
                        <td class="amount">
                            <div class="price-title">
                                    <span>Discount Amount</span>
                            </div>
                            <div class="sub-item-description ui-helper-clearfix">
                                    <span style="float:left;">Rs. </span><span>@itemprice</span>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>
                        </td>
                        <td>
                            <div>
                                <span>Have a coupon ?</span>
                            </div>
                            <div class="sub-item-description">
                                <label for="couponcode">Coupon Code: </label> @Html.TextBox("couponcode")<button id="apply_code" type="button">Apply Code</button>
                            </div>
                            <div id="div_coupon_description" class="sub-item-description ui-helper-hidden ui-corner-all">
                            </div>
                        </td>
                        <td class="amount">
                            <div id="div_coupon_discount" class="ui-helper-hidden">
                                <div class="price-title">
                                    <span>Discount Amount</span>
                                </div>
                                <div class="sub-item-description"><br/>
                                </div>
                                <div class="sub-item-description ui-helper-clearfix">
                                        <span style="float:left;">Rs. </span><span id="coupon_discount_value">( -0 ) /-</span>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
                    <tr>
                        <td></td>
                        <td>
                        <div>
                        <span>Final Bill</span>
                        </div>
                        <div class="sub-item-description"><span class="final-price">Net Amount Payable</span></div>
                        </td>
                        <td class="amount">
                            <div class="price-title">
                                <span>Net Total</span>
                            </div>
                            <div class="sub-item-description ui-helper-clearfix">
                                    <span  class="final-price" style="float:left;">Rs. </span><span class="final-price" id="span_net_total">@Model.Bill.NetAmount.ToString("#0 . 00 /-")</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
    <div class="new-booking-button-box ui-helper-clearfix">
        <a href="@Url.Action("New")" type="button" id="booking_step_back">Cancel</a>
        <button type="submit" id="booking_step_next">Confirm</button>
    </div>
}
@section head
{
    <style type="text/css">
        table{font-family:"Lucida Sans Unicode", "Lucida Grande", Sans-Serif;font-size:12px;background:#fff;width:700px;margin:25px auto;border-collapse:collapse;text-align:left;}
        table th{font-size:14px;font-weight:400;color:#039;border-bottom:2px solid #6678b1;padding:10px 8px;}
        table td{border-bottom:1px solid #ccc;color:#009;padding:6px 8px;vertical-align:top}
        table td.amount, table th.amount{text-align:right;}
        table td.amount div.price-title{text-align:left;}
        table td div.sub-item-description{border-top:1px solid #ccc;color:#009;padding:6px 8px;}
        span.span-table-detail{min-width:120px;display: inline-block}
        .text-right{text-align:right}
        .final-price{font-weight:500; font-size: 1.5em;color:green;}
        #apply_code{margin:auto 10px}
        #apply_code .ui-button-text{margin:0px 5px;padding:2px 10px;}
    </style>
    <script src="@Url.Content("~/Scripts/RestaurantBookingSystemScripts/BookingHelper.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/RestaurantBookingSystemScripts/RestaurantBookingSystemClientCore.js")" type="text/javascript"></script>
@* ReSharper disable InconsistentNaming *@
    <script type="text/javascript">
        var netAmount = @(Model.Bill.NetAmount) ;
        
        $(document).ready(function () {
            $('#booking_step_back').button({
                label: 'Cancel',
                icons: {
                    primary: "ui-icon-cancel"
                }
            });

            $('#booking_step_next').button({
                icons: {
                    secondary: "ui-icon-cart"
                },
                label: 'Confirm'
            });
            
            $('#apply_code').button().click(function () {
                var couponCode = $('#couponcode').val();
                $.post('@Url.Action("ValidateCoupon")', { 'couponcode': couponCode }, function (response, status) {
                    if (status === 'success') {
                        if (response.Notification !== undefined) {
                            var coupon_description = $('#div_coupon_description');
                            var span_net_total = $('#span_net_total');
                            var div_coupon_discount = $('#div_coupon_discount');
                            var coupon_discount_value = $('#coupon_discount_value');
                            if (response.Notification.Result === true && response.CouponDetail !== undefined) {
                                var offerdescription = response.Notification.Message;
                                var itemprice = 0;
                                var netprice = 0;
                                switch (response.CouponDetail.Type)
                                {
                                    case RestaurantOffer.Type.DiscountAmount:
                                        {
                                            offerdescription = 'Rs. ' + response.CouponDetail.Value + ' Off';
                                            itemprice = '(- ' + getSpacedFixedFraction(response.CouponDetail.Value) + ' ) /-';
                                            netprice = getSpacedFixedFraction((netAmount - response.CouponDetail.Value) < 0 ? 0 : (netAmount - response.CouponDetail.Value)) + ' /-';
                                            break;
                                        }
                                    case RestaurantOffer.Type.DiscountPercent:
                                        {
                                            var discountamount = (netAmount * response.CouponDetail.Value / 100);
                                            offerdescription = getSpacedFixedFraction(response.CouponDetail.Value) + " % Off";
                                            itemprice = '(- ' + getSpacedFixedFraction(discountamount) + ' ) /-';
                                            netprice = getSpacedFixedFraction(netAmount - discountamount) + ' /-';
                                            break;
                                        }
                                    case RestaurantOffer.Type.FreeServing:
                                        {
                                            offerdescription = response.CouponDetail.MenuItemName + ' worth Rs. ' + response.CouponDetail.Value + ' for FREE';
                                            itemprice = ("( -0 ) /-");
                                            netprice = getSpacedFixedFraction(netAmount) + ' /-';
                                            break;
                                        }
                                }
                                
                                coupon_description.text(offerdescription);
                                coupon_description.removeClass('ui-state-error').addClass('ui-state-highlight');
                                coupon_description.fadeIn();
                                div_coupon_discount.show();
                                coupon_discount_value.text(itemprice);
                                span_net_total.text(netprice);
                            }
                            else {
                                coupon_description.text(response.Notification.Message);
                                coupon_description.removeClass('ui-state-highlight').addClass('ui-state-error');
                                coupon_description.fadeIn();
                                div_coupon_discount.hide();
                                coupon_discount_value.text('');
                                span_net_total.text(getSpacedFixedFraction(netAmount) + ' /-');
                            }
                        }
                    }
                    else {
                            showViewNotification(false, 'There was a network related error, please try again !');
                    }
                }, 'json');
            });
        });
        
        function getSpacedFixedFraction(num) {
            var dec = num.toFixed(2).split('.')[0];
            var expo = num.toFixed(2).split('.')[1];
            return dec + ' . ' + expo;
        }
    </script>   
@* ReSharper restore InconsistentNaming *@
}